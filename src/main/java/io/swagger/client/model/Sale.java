/*
 * ChaOffice API
 * API definition for the ChaOffice project, a distributed platform for data and communication management in small and medium-sized enterprises (SMEs).
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * Sale
 */
@javax.annotation.processing.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
    date = "2025-03-30T15:15:44.636736291Z[GMT]")
public class Sale {
  @SerializedName("id")
  private String id = null;

  @SerializedName("client_name")
  private String clientName = null;

  @SerializedName("sale_timestamp")
  private OffsetDateTime saleTimestamp = null;

  @SerializedName("total_price")
  private Float totalPrice = null;

  @SerializedName("zone")
  private String zone = null;

  /**
   * Unique identifier for the sale.
   * @return id
   **/
  @Schema(description = "Unique identifier for the sale.")
  public String getId() {
    return id;
  }

  public Sale clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Name of the client.
   * @return clientName
   **/
  @Schema(description = "Name of the client.")
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }

  public Sale saleTimestamp(OffsetDateTime saleTimestamp) {
    this.saleTimestamp = saleTimestamp;
    return this;
  }

  /**
   * Timestamp of the sale.
   * @return saleTimestamp
   **/
  @Schema(description = "Timestamp of the sale.")
  public OffsetDateTime getSaleTimestamp() {
    return saleTimestamp;
  }

  public void setSaleTimestamp(OffsetDateTime saleTimestamp) {
    this.saleTimestamp = saleTimestamp;
  }

  public Sale totalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Total price of the sale.
   * @return totalPrice
   **/
  @Schema(description = "Total price of the sale.")
  public Float getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Float totalPrice) {
    this.totalPrice = totalPrice;
  }

  public Sale zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Zone where the sale occurred.
   * @return zone
   **/
  @Schema(description = "Zone where the sale occurred.")
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sale sale = (Sale) o;
    return Objects.equals(this.id, sale.id)
        && Objects.equals(this.clientName, sale.clientName)
        && Objects.equals(this.saleTimestamp, sale.saleTimestamp)
        && Objects.equals(this.totalPrice, sale.totalPrice)
        && Objects.equals(this.zone, sale.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, clientName, saleTimestamp, totalPrice, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sale {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    saleTimestamp: ").append(toIndentedString(saleTimestamp)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
