/*
 * ChaOffice API
 * API definition for the ChaOffice project, a distributed platform for data and communication management in small and medium-sized enterprises (SMEs).
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * User
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-30T15:15:44.636736291Z[GMT]")

public class User {
  @SerializedName("id")
  private String id = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("tokenKey")
  private String tokenKey = null;

  @SerializedName("emailVisibility")
  private Boolean emailVisibility = null;

  @SerializedName("verified")
  private Boolean verified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("avatar")
  private File avatar = null;

  @SerializedName("cluster")
  private String cluster = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

   /**
   * Unique identifier for the user.
   * @return id
  **/
  @Schema(description = "Unique identifier for the user.")
  public String getId() {
    return id;
  }

  public User email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Email address of the user.
   * @return email
  **/
  @Schema(description = "Email address of the user.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public User password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for the user.
   * @return password
  **/
  @Schema(description = "Password for the user.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

   /**
   * Token key for authentication.
   * @return tokenKey
  **/
  @Schema(description = "Token key for authentication.")
  public String getTokenKey() {
    return tokenKey;
  }

  public User emailVisibility(Boolean emailVisibility) {
    this.emailVisibility = emailVisibility;
    return this;
  }

   /**
   * Flag indicating email visibility.
   * @return emailVisibility
  **/
  @Schema(description = "Flag indicating email visibility.")
  public Boolean isEmailVisibility() {
    return emailVisibility;
  }

  public void setEmailVisibility(Boolean emailVisibility) {
    this.emailVisibility = emailVisibility;
  }

  public User verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

   /**
   * Flag indicating verification status.
   * @return verified
  **/
  @Schema(description = "Flag indicating verification status.")
  public Boolean isVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }

  public User name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Full name of the user.
   * @return name
  **/
  @Schema(description = "Full name of the user.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public User avatar(File avatar) {
    this.avatar = avatar;
    return this;
  }

   /**
   * User&#x27;s avatar image.
   * @return avatar
  **/
  @Schema(description = "User's avatar image.")
  public File getAvatar() {
    return avatar;
  }

  public void setAvatar(File avatar) {
    this.avatar = avatar;
  }

  public User cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

   /**
   * ID of the cluster the user belongs to.
   * @return cluster
  **/
  @Schema(description = "ID of the cluster the user belongs to.")
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }

   /**
   * Timestamp of user creation.
   * @return created
  **/
  @Schema(description = "Timestamp of user creation.")
  public OffsetDateTime getCreated() {
    return created;
  }

   /**
   * Timestamp of last update.
   * @return updated
  **/
  @Schema(description = "Timestamp of last update.")
  public OffsetDateTime getUpdated() {
    return updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.tokenKey, user.tokenKey) &&
        Objects.equals(this.emailVisibility, user.emailVisibility) &&
        Objects.equals(this.verified, user.verified) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.avatar, user.avatar) &&
        Objects.equals(this.cluster, user.cluster) &&
        Objects.equals(this.created, user.created) &&
        Objects.equals(this.updated, user.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, password, tokenKey, emailVisibility, verified, name, Objects.hashCode(avatar), cluster, created, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    tokenKey: ").append(toIndentedString(tokenKey)).append("\n");
    sb.append("    emailVisibility: ").append(toIndentedString(emailVisibility)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
